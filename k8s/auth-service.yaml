apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      containers:
        - name: auth-service
          image: registry.gitlab.com/hamdane10/you-scout/comments-service:${COMMENT_VERSION}
          ports:
            - containerPort: 8082
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: docker
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: you-scout-secret
                  key: postgres-password
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: you-scout-secret
                  key: postgres-username
            - name: MAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: you-scout-secret
                  key: mail-password
            - name: MAIL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: you-scout-secret
                  key: mail-username
            - name: OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: you-scout-secret
                  key: google-client-id
            - name: OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: you-scout-secret
                  key: google-client-secret
            - name: AWS_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: you-scout-secret
                  key: aws-access-key
            - name: APP_BASE_URL
              valueFrom:
                secretKeyRef:
                  name: you-scout-secret
                  key: app-base-url
            - name: AWS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: you-scout-secret
                  key: aws-secret-key
            - name: AWS_REGION_STATIC
              value: eu-west-3
            - name: AWS_S3_BUCKET
              value: you-scout-media

      imagePullSecrets:
        - name: registry-crds
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
spec:
  selector:
    app: auth-service
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082
