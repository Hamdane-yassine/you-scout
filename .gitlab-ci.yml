default:
  tags:
    - Windows


stages:
  - scan
  - version
  - build



variables:
  VERSION_TAG: $CI_PIPELINE_IID
  VERSION_FILE: version.txt
  SERVICES: value
  variable_value: value
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

scan_code:
  image: registry.gitlab.com/gitlab-org/security-products/analyzers/semgrep:latest
  stage: scan
  script:
    - semgrep --config auto -o gl-sast-report.json .
  artifacts:
    reports:
      sast: gl-sast-report.json

auth_major:
  stage: version
  script:
    - cd auth-service
    - echo "Incrementing Major version"
    - VERSION=$(cat $VERSION_FILE)
    - IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
    - VERSION_MAJOR=$((VERSION_PARTS[0] + 1))
    - echo "$VERSION_MAJOR.0.0" > $VERSION_FILE
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "increment-major-auth-service"'


versioning:
  stage: version
  script:
    - variable_value=$CI_COMMIT_REF_NAME
    - echo "Variable value $variable_value"
    - IFS='-' read -ra words <<< "$variable_value"
    - word1="${words[0]}"
    - word2=$(echo "$variable_value" | cut -d'-' -f2-)
    - echo $word1
    - echo $word2
    - variable_name="${word1}-${word2}"
    # - echo "key $variable_value, value ${variables[$variable_value]}"
    # - >
    #   curl --request PUT --header "PRIVATE-TOKEN: glpat-rzjTbhoKA5VmBypsnB6n" "https://gitlab.com/api/v4/projects/44998572/variables/$variable_value" --form "value=${variables[$variable_value]}+1"
    - |
      case "$word2" in
        "auth-service")
          echo "I'm in"
          IFS='.' read -ra VERSION_ARRAY <<< "$AUTH_VERSION"
          MAJOR=${VERSION_ARRAY[0]}
          MINOR=${VERSION_ARRAY[1]}
          PATCH=${VERSION_ARRAY[2]}
          if [[ $word1 == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ $word1 == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ $word1 == "patch" ]]; then
            PATCH=$((PATCH + 1))
          fi
      
          curl --request PUT --header "PRIVATE-TOKEN: glpat-rzjTbhoKA5VmBypsnB6n" "https://gitlab.com/api/v4/projects/44998572/variables/AUTH_VERSION" --form "value=$MAJOR.$MINOR.$PATCH"
          ;;
        "social-graph-service")
          echo "I'm in"
          IFS='.' read -ra VERSION_ARRAY <<< "$GRAPH_VERSION"
          MAJOR=${VERSION_ARRAY[0]}
          MINOR=${VERSION_ARRAY[1]}
          PATCH=${VERSION_ARRAY[2]}
          if [[ $word1 == "major" ]]; then
            echo "I'm really in"
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ $word1 == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ $word1 == "patch" ]]; then
            PATCH=$((PATCH + 1))
          fi
      
          curl --request PUT --header "PRIVATE-TOKEN: glpat-rzjTbhoKA5VmBypsnB6n" "https://gitlab.com/api/v4/projects/44998572/variables/GRAPH_VERSION" --form "value=$MAJOR.$MINOR.$PATCH"
          ;;
        "post-handling-service")
          echo "I'm in"
          IFS='.' read -ra VERSION_ARRAY <<< "$POST_VERSION"
          MAJOR=${VERSION_ARRAY[0]}
          MINOR=${VERSION_ARRAY[1]}
          PATCH=${VERSION_ARRAY[2]}
          if [[ $word1 == "major" ]]; then
            echo "I'm really in"
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ $word1 == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ $word1 == "patch" ]]; then
            PATCH=$((PATCH + 1))
          fi
      
          curl --request PUT --header "PRIVATE-TOKEN: glpat-rzjTbhoKA5VmBypsnB6n" "https://gitlab.com/api/v4/projects/44998572/variables/POST_VERSION" --form "value=$MAJOR.$MINOR.$PATCH"
          ;;
        "user-feed-service")
          echo "I'm in"
          IFS='.' read -ra VERSION_ARRAY <<< "$FEED_VERSION"
          MAJOR=${VERSION_ARRAY[0]}
          MINOR=${VERSION_ARRAY[1]}
          PATCH=${VERSION_ARRAY[2]}
          if [[ $word1 == "major" ]]; then
            echo "I'm really in"
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ $word1 == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ $word1 == "patch" ]]; then
            PATCH=$((PATCH + 1))
          fi
      
          curl --request PUT --header "PRIVATE-TOKEN: glpat-rzjTbhoKA5VmBypsnB6n" "https://gitlab.com/api/v4/projects/44998572/variables/FEED_VERSION" --form "value=$MAJOR.$MINOR.$PATCH"
          ;;
        "comments-service")
          echo "I'm in"
          IFS='.' read -ra VERSION_ARRAY <<< "$COMMENT_VERSION"
          MAJOR=${VERSION_ARRAY[0]}
          MINOR=${VERSION_ARRAY[1]}
          PATCH=${VERSION_ARRAY[2]}
          if [[ $word1 == "major" ]]; then
            echo "I'm really in"
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ $word1 == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ $word1 == "patch" ]]; then
            PATCH=$((PATCH + 1))
          fi
      
          curl --request PUT --header "PRIVATE-TOKEN: glpat-rzjTbhoKA5VmBypsnB6n" "https://gitlab.com/api/v4/projects/44998572/variables/COMMENT_VERSION" --form "value=$MAJOR.$MINOR.$PATCH"
          ;;
        # "skills-service")
        #   echo "I'm in"
        #   IFS='.' read -ra VERSION_ARRAY <<< "$SKILL_VERSION"
        #   MAJOR=${VERSION_ARRAY[0]}
        #   MINOR=${VERSION_ARRAY[1]}
        #   PATCH=${VERSION_ARRAY[2]}
        #   if [[ $word1 == "major" ]]; then
        #     echo "I'm really in"
        #     MAJOR=$((MAJOR + 1))
        #     MINOR=0
        #     PATCH=0
        #   elif [[ $word1 == "minor" ]]; then
        #     MINOR=$((MINOR + 1))
        #     PATCH=0
        #   elif [[ $word1 == "patch" ]]; then
        #     PATCH=$((PATCH + 1))
        #   fi
      
        #   curl --request PUT --header "PRIVATE-TOKEN: glpat-rzjTbhoKA5VmBypsnB6n" "https://gitlab.com/api/v4/projects/44998572/variables/SKILL_VERSION" --form "value=$MAJOR.$MINOR.$PATCH"
        *)
          echo "Invalid value or no matching case"
          ;;
      
      esac
  rules:
    - if: '$CI_COMMIT_TAG'

graph_major:
  stage: version
  script:
    - cd social-graph-service
    - echo "Incrementing Major version"
    - VERSION=$(cat $VERSION_FILE)
    - IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
    - VERSION_MAJOR=$((VERSION_PARTS[0] + 1))
    - echo "$VERSION_MAJOR.0.0" > $VERSION_FILE
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "increment-major-social-graph-service"'
post_major:
  stage: version
  script:
    - cd post-handling-service
    - echo "Incrementing Major version"
    - VERSION=$(cat $VERSION_FILE)
    - IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
    - VERSION_MAJOR=$((VERSION_PARTS[0] + 1))
    - echo "$VERSION_MAJOR.0.0" > $VERSION_FILE
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "increment-major-post-handling-service"'
feed_major:
  stage: version
  script:
    - cd user-feed-service
    - echo "Incrementing Major version"
    - VERSION=$(cat $VERSION_FILE)
    - IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
    - VERSION_MAJOR=$((VERSION_PARTS[0] + 1))
    - echo "$VERSION_MAJOR.0.0" > $VERSION_FILE
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "increment-major-user-feed-service"'
comment_major:
  stage: version
  script:
    - cd comments-service
    - echo "Incrementing Major version"
    - VERSION=$(cat $VERSION_FILE)
    - IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
    - VERSION_MAJOR=$((VERSION_PARTS[0] + 1))
    - echo "$VERSION_MAJOR.0.0" > $VERSION_FILE
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "increment-major-comments-service"'
skill_major:
  stage: version
  script:
    - cd skills-service
    - echo "Incrementing Major version"
    - VERSION=$(cat $VERSION_FILE)
    - IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
    - VERSION_MAJOR=$((VERSION_PARTS[0] + 1))
    - echo "$VERSION_MAJOR.0.0" > $VERSION_FILE
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "increment-major-skills-service"'





authentication-service-build:
  image: maven:3.8.4-openjdk-17
  stage: build
  before_script:
    - cd auth-service
    - export PACKAGE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/authentication
    - VERSION=$(cat $VERSION_FILE)
    - export VERSION=$(cat $VERSION_FILE)
  script: |
    mvn compile jib:build \
      -Djib.to.auth.username=${CI_REGISTRY_USER} \
      -Djib.to.auth.password=${CI_REGISTRY_PASSWORD} \
  artifacts:
    name: "Maven artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    reports:
      junit:
        - "auth-service/target/*-reports/TEST-*.xml"
  cache:
    paths:
      - .m2/repository/
  only:
    changes:
      - auth-service/**/*


social-graph-build:
  image: maven:3.8.4-openjdk-17
  stage: build
  before_script:
    - cd social-graph-service
  script: |
    mvn compile jib:build \
    -Djib.to.auth.username=${CI_REGISTRY_USER} \
    -Djib.to.auth.password=${CI_REGISTRY_PASSWORD} \
  artifacts:
    paths:
      - social-graph-service/target/*.jar
  only:
    changes:
      - social-graph-service/**/*


post-service-build:
  image: maven:3.8.4-openjdk-17
  stage: build
  before_script:
    - cd post-service
  script: "mvn package -B"
  artifacts:
    paths:
      - post-service/target/*.jar.original
  only:
    changes:
      - post-service/**/*



user-feed-build:
  image: maven:3.8.4-openjdk-17
  stage: build
  before_script:
    - cd user-feed-service
  script: "mvn package -B"
  artifacts:
    paths:
      - user-feed-service/target/*.jar
  cache:
    paths:
      - .m2/repository/
      - user-feed-service/target
  only:
    changes:
      - user-feed-service/**/*


comments-service-build:
  image: maven:3.8.4-openjdk-17
  stage: build
  before_script:
    - cd comments-service
    - export VERSION=$(cat $VERSION_FILE)
  script:
    - mvn compile jib:build -Djib.to.auth.username=$CI_REGISTRY_USER -Djib.to.auth.password=$CI_REGISTRY_PASSWORD -Djib.to.image=$CONTAINER_RELEASE_IMAGE
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository/
  artifacts:
    paths:
      - comments-service/target/*.jar
  only:
    changes:
      - comments-service/**/*


skills-service-build:
  image: maven:3.8.4-openjdk-17
  stage: build
  before_script:
    - cd skills-service
    - export VERSION=$(cat $VERSION_FILE)
  script:
    - mvn compile jib:build \
      -Djib.to.auth.username=${CI_REGISTRY_USER} \
      -Djib.to.auth.password=${CI_REGISTRY_PASSWORD} \
      -Djib.to.image=${CI_REGISTRY_IMAGE}
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository/
  artifacts:
    paths:
      - skills-service/target/*.jar
  only:
    changes:
      - skills-service/**/*


increment_minor:
  stage: build
  script:
    - echo "Incrementing Minor version"
    - VERSION=$(cat $VERSION_FILE)
    - IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
    - VERSION_MINOR=$((VERSION_PARTS[1] + 1))
    - echo "${VERSION_PARTS[0]}.$VERSION_MINOR.0" > $VERSION_FILE
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "increment-minor"'

increment_patch:
  stage: build
  script:
    - echo "Incrementing Patch version"
    - VERSION=$(cat $VERSION_FILE)
    - IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
    - VERSION_PATCH=$((VERSION_PARTS[2] + 1))
    - echo "${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$VERSION_PATCH" > $VERSION_FILE
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "increment-patch"'

# major_auth:
#   extends: .increment_major
#   variables:
#     SERVICE: "auth-service"
# major_graph:
#   extends: .increment_major
#   variables:
#     SERVICE: "social-graph-service"
# major_post:
#   extends: .increment_major
#   variables:
#     SERVICE: "post-handling-service"
# major_feed:
#   extends: .increment_major
#   variables:
#     SERVICE: "feed-service"
# major_comment:
#   extends: .increment_major
#   variables:
#     SERVICE: "comment-service"
# major_skill:
#   extends: .increment_major
#   variables:
#     SERVICE: "skills-service"


